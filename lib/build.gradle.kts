/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */
version = "1.0-SNAPSHOT"

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation("org.apache.kafka:connect-api:3.5.1")
    implementation("org.slf4j:slf4j-api:1.7.36")

    // Dependencies for HTTP Sink example.
    implementation("com.squareup.okhttp3:okhttp:4.11.0")
    implementation("org.json:json:20230618")

    // Testing deps.
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.3")
    testImplementation("com.squareup.okhttp3:mockwebserver:4.10.0")
    testImplementation("org.slf4j:slf4j-jdk14:1.7.36")

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.named<Jar>("jar") {
    manifest {
        attributes(
                mapOf(
                        "Build-Jdk" to System.getProperty("java.version"),
                        "Specification-Title" to "Example Connectors for Kafka Connect",
                        "Specification-Version" to "1.0",
                        "Specification-Vendor" to "Redpanda Solutions Team",
                        "Implementation-Title" to "Example Connectors for Kafka Connect",
                        "Implementation-Version" to version
                )
        )
        archiveBaseName.set(rootProject.name)
    }
}

tasks.register<Copy>("getFlatDependencies") {
        val runtimeClasspath =
            project.configurations.matching { it.name == "desktopRuntimeClasspath" }
	println("runtimeClasspath = $runtimeClasspath")
        runtimeClasspath.all {
            for (dep in map { file: File -> file.absoluteFile }) {
                project.copy {
                    from(dep)
                    into("${rootProject.projectDir}/build/libs")
                }
            }
        }
}
